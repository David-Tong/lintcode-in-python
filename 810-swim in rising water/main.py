class Solution:
    """
    @param grid: the grid
    @return: the least time you can reach the bottom right square
    """
    def swim_in_water(self, grid):
        # Write your code here
        self.DIRECTIONS = ((-1, 0), (1, 0), (0, -1), (0, 1))
        self.M = len(grid)
        self.N = len(grid[0])

        left = 0
        right = 0
        for row in grid:
            for item in row:
                right = max(right, item)

        while left + 1 < right:
            middle = (left + right) // 2
            if self.__swim(grid, middle):
                right = middle - 1
            else:
                left = middle + 1

        if self.__swim(grid, left):
            return left
        elif self.__swim(grid, right):
            return right
        else:
            return right + 1

    def __swim(self, grid, k):
        if grid[0][0] > k or grid[self.M - 1][self.N - 1] > k:
            return False

        from collections import deque
        bfs = deque()
        bfs.append((0, 0))
        visit = set()
        visit.add((0, 0))
        while bfs:
            cx, cy = bfs.popleft()
            for dx, dy in self.DIRECTIONS:
                nx = cx + dx
                ny = cy + dy
                if 0 <= nx < self.M and 0 <= ny < self.N:
                    if grid[nx][ny] <= k:
                        if nx == self.M - 1 and ny == self.N - 1:
                            return True
                        if (nx, ny) not in visit:
                            bfs.append((nx, ny))
                            visit.add((nx, ny))
        return False


grid = [[0,2],[1,3]]
grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
grid = [[0,0],[0,0]]
grid = [[25,25],[25,25]]
grid = [[0,25],[25,0]]
grid = [[35,19,17,25,4,10],[8,18,29,21,28,31],[15,5,33,2,13,3],[26,20,27,23,11,1],[6,14,24,7,12,16],[30,34,32,22,0,9]]
grid = [[281,116,221,293,132,29,66,150,332,371,35,211,70,111,229,59,284,303,295,275],[147,268,209,55,186,182,309,80,321,176,26,106,124,270,97,9,76,367,91,198],[334,93,345,68,264,348,125,22,316,100,323,285,139,138,171,305,223,343,61,127],[386,390,119,189,53,21,302,379,102,286,178,243,19,47,258,216,151,165,292,225],[10,153,269,358,43,219,374,217,39,110,256,393,257,56,3,1,77,331,262,8],[315,364,385,123,113,215,96,350,5,330,326,16,194,212,299,240,73,31,17,380],[90,395,191,359,328,183,342,129,370,300,341,193,130,336,136,81,314,347,161,238],[63,253,200,288,4,236,36,67,37,48,294,201,242,369,157,357,109,57,271,327],[34,38,126,389,325,72,104,143,196,142,372,205,108,62,146,365,101,207,333,272],[112,64,313,383,75,180,163,179,44,181,197,133,32,228,233,248,363,86,78,71],[121,296,30,158,301,54,202,349,7,324,195,399,226,277,340,103,33,263,117,20],[361,154,58,368,266,144,185,274,306,51,234,311,40,308,69,261,344,307,338,280],[120,28,159,366,237,339,74,394,235,250,95,164,329,24,60,310,149,156,252,192],[18,273,52,172,65,247,276,177,206,175,79,346,279,122,298,230,82,188,135,377],[184,254,115,382,208,45,137,145,396,42,224,373,241,169,199,107,337,12,134,174],[391,322,381,290,49,388,278,203,105,173,232,85,351,168,0,11,239,319,312,282],[128,289,318,15,166,89,162,46,25,317,297,356,99,304,148,152,141,249,98,245],[265,259,87,392,140,220,14,227,213,320,251,155,255,231,210,246,83,244,27,131],[190,378,291,204,267,260,360,376,6,170,13,214,187,362,94,352,283,397,218,353],[92,2,387,222,160,384,50,114,88,335,375,167,84,355,354,118,287,41,23,398]]
grid = [[55,33,29,78,47,62,60,79,41,54],[34,16,93,64,38,46,91,8,40,65],[22,74,12,70,28,80,90,32,6,45],[23,49,85,52,11,56,83,5,36,95],[31,48,14,89,76,82,19,26,97,63],[0,75,9,77,2,51,94,7,71,99],[35,81,44,87,43,18,67,17,13,57],[92,53,37,39,20,88,15,68,24,66],[27,69,84,3,72,10,61,30,50,58],[73,96,98,25,4,21,86,1,59,42]]

solution = Solution()
print(solution.swim_in_water(grid))